# -*- coding: utf-8 -*-
"""Codice Python per Scraper Regione Puglia (v5.4 - Intelligente)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cxx7nHfyTRVFaGqok3podhBEfmAXmH7_
"""

# -*- coding: utf-8 -*-

# --- Scraper per "Bonus Facile" - Versione 5.4 (Regione Puglia Intelligente) ---
# Obiettivo: Estrarre bandi di alta qualità dal portale della Regione Puglia.
# Correzione: Aggiornato il selettore CSS per l'attesa dinamica e l'estrazione
# dei dati, basandosi sul feedback dell'utente (class="row news-list-item").
#
# Per eseguire questo script, assicurati di avere le librerie necessarie:
# py -m pip install selenium chromedriver-autoinstaller requests beautifulsoup4 psycopg2-binary python-dotenv lxml

import os
import requests
from bs4 import BeautifulSoup
import psycopg2
from urllib.parse import urljoin
from dotenv import load_dotenv
import hashlib
import time
import random

# Importazioni per Selenium
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
import chromedriver_autoinstaller

# Carica le variabili d'ambiente da un file .env
load_dotenv()

# --- CONFIGURAZIONE ---
DATABASE_URL = os.getenv("DATABASE_URL")

# --- STRATEGIA v5.4 ---
REGIONE_PUGLIA_URL = "https://www.regione.puglia.it/bandi-e-avvisi"
REGIONE_PUGLIA_BASE_URL = "https://www.regione.puglia.it"
ID_FONTE = "reg_puglia_principale"

# Filtro Semantico potenziato
TITLE_EXCLUSION_KEYWORDS = [
    'concorso', 'rettifica', 'graduatoria', 'manifestazione di interesse',
    'affidamento', 'incarico', 'esiti', 'nomina', 'commissione',
    'mobilità', 'elenco ammessi', 'selezione pubblica', 'cessione',
    'esperti esterni', 'dirigente', 'avviso esplorativo',
    'revisori legali', 'aggiornamento elenco', 'tecnologie critiche', 'step',
    'espropriazione', 'tavolo tecnico', 'set cinematografico', 'pre-qualificazione',
    'terme', 'irreperibilità', 'sportello', 'agenti penitenziari'
]


def connect_to_db():
    """
    Crea e restituisce una connessione al database PostgreSQL.
    """
    try:
        conn = psycopg2.connect(DATABASE_URL)
        return conn
    except psycopg2.OperationalError as e:
        print(f"Errore: Impossibile connettersi al database.")
        return None

def scrape_regione_puglia():
    """
    Funzione principale che esegue lo scraping e l'inserimento dei dati.
    """
    print("--- Avvio scraper per Regione Puglia (v5.4 - Intelligente) ---")
    print("Strategia: Selenium con attesa mirata + Filtro Semantico Avanzato.")

    # 1. Configura e avvia Selenium
    print("1. Avvio del browser virtuale...")
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")

    chromedriver_autoinstaller.install()
    driver = None
    soup = None

    try:
        driver = webdriver.Chrome(options=chrome_options)
        print(f"2. Scaricamento della pagina: {REGIONE_PUGLIA_URL}")
        driver.get(REGIONE_PUGLIA_URL)

        # 2. Attendi che i bandi vengano caricati
        print("   -> Attesa caricamento dinamico dei bandi...")
        wait = WebDriverWait(driver, 25)

        # --- MODIFICA CHIAVE v5.4: Usiamo il nuovo selettore trovato dall'utente ---
        # Usiamo un selettore tag-agnostico per maggiore robustezza: .row.news-list-item
        wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, ".row.news-list-item")))

        html_content = driver.page_source
        soup = BeautifulSoup(html_content, 'lxml')
        print(f"   -> Pagina scaricata e analizzata con successo.")

    except TimeoutException:
        print("   -> ERRORE: Caricamento della pagina scaduto. Nessun bando trovato con il selettore '.row.news-list-item'.")
        if driver: driver.quit()
        return
    except Exception as e:
        print(f"   -> ERRORE durante l'esecuzione di Selenium: {e}")
        if driver: driver.quit()
        return
    finally:
        if driver:
            driver.quit()
            print("   -> Browser virtuale chiuso.")

    # 3. Trova tutti i bandi candidati usando il nuovo selettore
    candidate_bandi = soup.select('.row.news-list-item')
    print(f"3. Trovati {len(candidate_bandi)} bandi candidati nella pagina.")

    if not candidate_bandi:
        return

    print("4. Inizio filtraggio e inserimento nel database...")

    conn = connect_to_db()
    if not conn:
        return

    cursor = conn.cursor()

    bandi_inseriti_totali = 0
    bandi_esistenti_totali = 0

    for bando_html in candidate_bandi:
        try:
            # Cerca il link del titolo in diverse possibili posizioni
            link_tag = bando_html.select_one('h2 a[href], h3 a[href]')
            if not link_tag:
                continue

            titolo = link_tag.get_text(strip=True)

            # Applica il filtro semantico
            titolo_lower = titolo.lower()
            if any(keyword in titolo_lower for keyword in TITLE_EXCLUSION_KEYWORDS):
                print(f"   -> SCARTATO (titolo non pertinente): '{titolo}'")
                continue

            link_relativo = link_tag['href']
            link_ufficiale = urljoin(REGIONE_PUGLIA_BASE_URL, link_relativo)

            stato_tag = bando_html.select_one('span.badge')
            stato = stato_tag.get_text(strip=True) if stato_tag else "Aperto"
            stato_standard = "Chiuso" if "chius" in stato.lower() else "Aperto"

            print(f"   -> PERTINENTE. Analizzando: '{titolo}' (Stato: {stato})")

            hash_id = hashlib.sha1(link_ufficiale.encode()).hexdigest()[:10]
            id_bando = f"reg_puglia_{hash_id}"

            bando_data = {
                "id_bando": id_bando, "titolo": titolo, "ente_erogatore": "Regione Puglia",
                "categoria": "Altro", "descrizione_breve": titolo, "link_ufficiale": link_ufficiale,
                "data_pubblicazione": None, "stato": stato_standard,
                "livello": "Regionale", "regione": "Puglia", "id_fonte": ID_FONTE
            }

            insert_query = (
                "INSERT INTO bandi (id_bando, titolo, ente_erogatore, categoria, descrizione_breve, link_ufficiale, data_pubblicazione, stato, livello, regione, id_fonte, data_ultimo_check) "
                "VALUES (%(id_bando)s, %(titolo)s, %(ente_erogatore)s, %(categoria)s, %(descrizione_breve)s, %(link_ufficiale)s, %(data_pubblicazione)s, %(stato)s, %(livello)s, %(regione)s, %(id_fonte)s, NOW()) "
                "ON CONFLICT (id_bando) DO UPDATE SET titolo = EXCLUDED.titolo, stato = EXCLUDED.stato, data_ultimo_check = NOW();"
            )

            cursor.execute(insert_query, bando_data)

            if cursor.rowcount > 0:
                print(f"      -> Inserito nel database.")
                bandi_inseriti_totali += 1
            else:
                print(f"      -> Già esistente nel database.")
                bandi_esistenti_totali += 1

        except Exception as e:
            print(f"   -> ERRORE durante l'elaborazione di un bando: {e}")

        time.sleep(random.randint(1, 2))

    conn.commit()
    cursor.close()
    conn.close()

    print("\n--- Scraper per Regione Puglia completato ---")
    print(f"Bandi inseriti o aggiornati: {bandi_inseriti_totali}")
    print(f"Bandi già esistenti e non modificati: {bandi_esistenti_totali}")


if __name__ == "__main__":
    scrape_regione_puglia()